#pragma once

#include <math/seadVector.h>
#include <prim/seadBitFlag.h>
#include <prim/seadSafeString.h>
#include <stream/seadStream.h>

#include "System/GameDataFunction.h"
#include "System/GameProgressData.h"

struct SessionMusicianType;

class GameDataFile {
public:
    class HintInfo {
    public:
        enum class HintStatus { NONE, NPC, AMIIBO };

        void clear();

        bool isDisableByWorldWarpHole(bool) const;
        bool isEnableUnlock(s32, bool, s32, bool) const;
        bool isHintStatusUnlock(s32, s32, bool) const;
        bool isHintStatusUnlockByNpc() const;
        bool isHintStatusUnlockByAmiibo() const;
        bool isEnableNameUnlockByScenario(s32, s32, bool) const;

        bool testFunc(s32, bool, s32, bool) const;

    private:
        sead::FixedSafeString<0x80> mStageName;
        sead::FixedSafeString<0x80> mObjId;
        sead::FixedSafeString<0x40> mScenarioName;
        const char* mObjectName;
        sead::Vector3f mTrans;
        sead::Vector3f mTransAgain;
        void* unkPtr1;
        void* unkPtr2;
        void* unkPtr3;
        void* unkPtr4;
        s32 mMainScenarioNo;
        s32 mWorldIndex;
        bool mIsMoonRock;
        bool unkBool1;
        bool mIsAchievement;
        bool mIsGrand;
        bool mIsShopMoon;
        s32 unkInt;
        HintStatus mHintStatus;
        s32 unkInt3;
        s32 unkInt4;
        void* unkPtr6;
        s32 mUniqueID;
        s32 mHintIdx;
        sead::FixedSafeString<0x20> mOptionalID;
        sead::BitFlag32 mProgressBitflag;
        bool unkBool2;
        bool unkBool3;
    };

    class CoinCollectInfo {
    public:
        void clear();
    };

    enum CountType {};

    GameDataFile(GameDataHolder*);
    void initializeData();
    void tryReadByamlData(const u8*);
    void tryFindCoinCollectInfo(const char*, const char*) const;
    void tryFindShineIndexByUniqueId(s32) const;
    void tryFindCoinCollectIndexByUniqueId(s32) const;
    void buyDefaultItem();
    void unlockAchievementShineName();
    void isKidsMode() const;
    void updateWorldMapIndex();
    void updateWorldWarpIndex();
    void getScenarioNo(s32) const;
    void getMainScenarioNo(s32) const;
    void isEmpty() const;
    void initializeCheckpointTable();
    void generateSaveDataIdForPrepo();
    void resetMapIcon();
    void wearDefault();
    void initializeHintList();
    void initializeCoinCollectList();
    void resetTempData();
    bool isGameClear() const;
    bool isUnlockedWorld(s32 index) const;
    bool isAlreadyGoWorld(s32 index) const;
    void addPlayTime(s32, const al::IUseSceneObjHolder*);
    void getPlayTimeTotal() const;
    void updateSaveTime();
    void updateSaveTimeForDisp();
    void updateSaveInfoForDisp();
    void getLastUpdateTime() const;
    void generateSaveDataIdForPrepoForWrite();
    void resetSaveDataIdForPrepoForWrite();
    void startStage(const char*, s32);
    void isRaceStart() const;
    void checkIsHomeStage(const char*) const;
    void setGameClear();
    void setOriginalHintTrans(s32);
    void getPlayerHitPointData() const;
    void startDemoStage(const char*);
    void changeNextStage(const ChangeStageInfo*, s32);
    void returnPrevStage();
    void changeNextStageWithDemoWorldWarp(const char*);
    void changeNextStageWithWorldWarpHole(const char*);
    void restartStage();
    void calcNextScenarioNo() const;
    void getStageNameCurrent() const;
    void tryGetStageNameCurrent() const;
    void getStageNameNext() const;
    void changeWipeType(const char*);
    void setActivateHome();
    void isGoToCeremonyFromInsideHomeShip() const;
    void getPlayerStartId() const;
    void setCheckpointId(const al::PlacementId*);
    void setRestartPointId(const al::PlacementId*);
    void clearStartId();
    void tryGetRestartPointIdString() const;
    void endStage();
    void missAndRestartStage();
    void setMissRestartInfo(const al::PlacementInfo&);
    void isUseMissRestartInfo() const;
    void isFirstTimeNextWorld() const;
    void getAchievement(const char*);
    void isGotShine(const ShineInfo*) const;
    void isGotShine(s32) const;
    void checkGotShine(const char*) const;
    void setGotShine(const ShineInfo*);
    void getShineNum() const;
    void getShineNum(s32) const;
    void getTotalShineNum() const;
    void getTotalShopShineNum() const;
    void tryGetNextMainScenarioLabel(sead::BufferedSafeString*, sead::BufferedSafeString*) const;
    void tryGetNextMainScenarioPos(sead::Vector3f*) const;
    void tryFindNextMainScenarioInfo() const;
    void addPayShine(s32);
    void addPayShineCurrentAll();
    void getPayShineNum(s32) const;
    void getTotalPayShineNum() const;
    void isPayShineAllInAllWorld() const;
    void addKey(s32);
    void getKeyNum() const;
    void addOpenDoorLockNum(s32);
    void setStartedObj(const al::PlacementId*);
    void isStartedObj(const al::PlacementId*, const char*) const;
    void isStartedObj(const char*, const char*) const;
    void setSaveObjS32(const al::PlacementId*, s32);
    void tryFindSaveObjS32(const al::PlacementId*);
    void isExistSessionMember(const SessionMusicianType&) const;
    void addSessionMember(const SessionMusicianType&);
    void addCoinCollect(const al::PlacementId*);
    void isGotCoinCollect(const al::PlacementId*) const;
    void getCoinCollectNum() const;
    void getCoinCollectGotNum() const;
    void getCoinCollectGotNum(s32) const;
    void useCoinCollect(s32);
    void tryFindExistCoinCollectStageName(s32) const;
    void payCoinToSphinx();
    void isPayCoinToSphinx() const;
    void answerCorrectSphinxQuiz();
    void answerCorrectSphinxQuizAll();
    void isAnswerCorrectSphinxQuiz(s32) const;
    void isAnswerCorrectSphinxQuizAll(s32) const;
    void isTalkAlreadyLocalLanguage() const;
    void talkLocalLanguage();
    void isFirstWorldTravelingStatus() const;
    void saveWorldTravelingStatus(const char*);
    void getWorldTravelingStatus() const;
    void isStartWorldTravelingPeach() const;
    void startWorldTravelingPeach();
    void setGrowFlowerTime(const al::PlacementId*, const al::PlacementId*, u64);
    void setGrowFlowerTime(const al::PlacementId*, u64);
    void getGrowFlowerTime(const al::PlacementId*) const;
    void addGrowFlowerGrowLevel(const al::PlacementId*, u32);
    void getGrowFlowerGrowLevel(const al::PlacementId*) const;
    void isUsedGrowFlowerSeed(const al::PlacementId*) const;
    void findGrowFlowerPotIdFromSeedId(const al::PlacementId*);
    void addCoin(s32);
    void addPlayerJumpCount();
    void getPlayerJumpCount() const;
    void addPlayerThrowCapCount();
    void getPlayerThrowCapCount() const;
    void readFromStream(sead::ReadStream*, u8*);
    void tryReadByamlDataFromStream(sead::ReadStream*, u8*, s32);
    void writeToStream(sead::WriteStream*, sead::Heap*) const;
    void tryWriteByByaml(sead::WriteStream*, sead::Heap*) const;
    void isPlayDemoPlayerDownForBattleKoopaAfter() const;
    void getCheckpointNumMaxInWorld() const;
    void getCheckpointTransInWorld(const char*) const;
    void isGotCheckpointInWorld(s32) const;
    void calcCheckpointIndexInScenario(s32) const;
    void getCheckpointObjIdInWorld(s32) const;
    void isGotCheckpoint(al::PlacementId*) const;
    void changeNextSceneByGotCheckpoint(s32);
    void changeNextSceneByWarp();
    void changeNextSceneByHome();
    void startYukimaruRace();
    void startYukimaruRaceTutorial();
    void startRaceManRace();
    void registerCheckpointTrans(const al::PlacementId*, const sead::Vector3f&);
    void calcGetCheckpointNum() const;
    void isEnableUnlockHint() const;
    void calcRestHintNum() const;
    void unlockHint();
    void unlockHintImpl(s32);
    void unlockHintAmiibo();
    void unlockHintAddByMoonRock();
    void calcHintNum() const;
    void calcHintTrans(s32) const;
    void findHint(s32) const;
    void calcHintTransMostEasy() const;
    void findHintInfoMostEasy() const;
    void calcHintMoonRockNum() const;
    void calcHintMoonRockTrans(s32) const;
    void findHintMoonRock(s32) const;
    void tryUnlockShineName(s32, s32);
    void isOpenMoonRock(s32) const;
    void calcShineIndexTableNameAvailable(s32*, s32*, s32);
    void calcShineIndexTableNameUnlockable(s32*, s32*, s32);
    void isUnlockAchievementShineName() const;
    void unlockWorld(s32);
    void noPlayDemoWorldWarp();
    void calcWorldWarpHoleThroughNum() const;
    void getWorldWarpHoleThroughNumMax() const;
    void enteredStage();
    void buyItem(const ShopItem::ItemInfo*, bool);
    void tryFindItemList(const ShopItem::ItemInfo*) const;
    void calcHaveClothNum() const;
    void calcHaveCapNum() const;
    void calcHaveStickerNum() const;
    void calcHaveGiftNum() const;
    void isBuyItem(const ShopItem::ItemInfo*) const;
    void isBuyItem(const char*, const sead::FixedSafeString<64>*) const;
    void buyItemAll();
    void wearCostume(const char*);
    void wearCap(const char*);
    void addHackDictionary(const char*);
    void isExistInHackDictionary(const char*) const;
    void findShine(s32, s32) const;
    void isGotShine(s32, s32) const;
    void isOpenShineName(s32, s32) const;
    void calcShineNumInOneShine(s32, s32) const;
    void checkAchievementShine(s32, s32) const;
    void getWorldTotalShineNum(s32) const;
    void getWorldTotalShineNumMax(s32) const;
    void winRace();
    void findRaceRecord(const char*) const;
    void incrementRaceLoseCount(s32);
    void getRaceLoseCount(s32) const;
    void setJumpingRopeBestCount(s32);
    void setUpdateJumpingRopeScoreFlag();
    void setVolleyballBestCount(s32);
    void setUpdateVolleyballScoreFlag();
    void isExistJango() const;
    void setJangoTrans(const sead::Vector3f&);
    void setAmiiboNpcTrans(const sead::Vector3f&);
    void setTimeBalloonNpcTrans(const sead::Vector3f&);
    void setPoetterTrans(const sead::Vector3f&);
    void setShopNpcTrans(const sead::Vector3f&, const char*, s32);
    void setMoonRockTrans(const sead::Vector3f&);
    void setMiniGameInfo(const sead::Vector3f&, const char*);
    void calcMiniGameNum() const;
    void getMiniGameNumMax() const;
    void getMiniGameTrans(s32) const;
    void getMiniGameName(s32) const;
    void isExistTimeBalloonNpc() const;
    void getTimeBalloonNpcTrans() const;
    void isExistPoetter() const;
    void getPoetterTrans() const;
    void isAlreadyShowExplainCheckpointFlag() const;
    void showExplainCheckpointFlag();
    void getShopNpcTrans(s32) const;
    void isShopSellout(s32) const;
    void calcShopNum() const;
    void getShopNpcIconNumMax() const;
    void getScenarioNo() const;
    void getScenarioNoPlacement() const;
    void isClearWorldMainScenario(s32) const;
    void isFlagOnTalkMessageInfo(s32) const;
    void setFlagOnTalkMessageInfo(s32);
    void isTalkKakku() const;
    void talkKakku();
    void isTalkWorldTravelingPeach() const;
    void talkWorldTravelingPeach();
    void isTalkCollectBgmNpc() const;
    void talkCollectBgmNpc();
    void getTokimekiMayorNpcFavorabilityRating() const;
    void setTokimekiMayorNpcFavorabilityRating(s32);
    void isFirstNetwork() const;
    void noFirstNetwork();
    void setKidsMode(bool);
    void isPlayScenarioCamera(const QuestInfo*) const;
    void isNextMainShine(const QuestInfo*) const;
    void isNextMainShine(s32) const;
    void isMainShine(s32) const;
    void isLatestGetMainShine(const ShineInfo*) const;
    void calcIsGetMainShineAll(const al::IUseSceneObjHolder*) const;
    void calcIsGetShineAllInWorld(s32) const;
    void tryFindLinkedShineIndex(const al::ActorInitInfo&, const al::IUseSceneObjHolder*) const;
    void tryFindLinkedShineIndex(const al::ActorInitInfo&, s32,
                                 const al::IUseSceneObjHolder*) const;
    void tryFindLinkedShineIndexByLinkName(const al::IUseSceneObjHolder*, const al::ActorInitInfo&,
                                           const char*) const;
    void calcLinkedShineNum(const al::ActorInitInfo&) const;
    void tryFindShineIndex(const al::ActorInitInfo&) const;
    void tryFindShineIndex(const char*, const char*) const;
    void disableHintById(s32);
    void enableHintById(s32);
    void setStartShine(const ShineInfo*);
    void getStartShineNextIndex() const;
    void setHintTrans(s32, const sead::Vector3f&);
    void resetHintTrans(s32);
    void registerShineInfo(const ShineInfo*, const sead::Vector3f&);
    void calcRestShineInStageWithWorldProgress(const char*) const;
    void calcGetShineNumByObjectNameOrOptionalId(const char*, CountType) const;
    void calcGetShineNumByObjectNameWithWorldId(const char*, s32) const;
    void calcAllShineNumByObjectNameOrOptionalId(const char*) const;
    void calcGetShineNumByStageName(const char*) const;
    void tryFindAndInitShineInfoByOptionalId(ShineInfo*, const char*);
    void tryFindUniqueId(const ShineInfo*) const;
    void findUnlockShineNumCurrentWorld(bool*) const;
    void getMainScenarioNoCurrent() const;
    void setMainScenarioNo(s32);
    void isCollectedBgm(const char*, const char*) const;
    void getCollectBgmByIndex(s32) const;
    void trySetCollectedBgm(const char*, const char*);
    void getCollectedBgmNum() const;
    void getCollectedBgmMaxNum() const;
    void setGotShine(s32);
    void setGotShine(const GameDataFile::HintInfo*);
    void isEnableOpenMoonRock(s32) const;
    void tryWriteByByaml(al::ByamlWriter*) const;

private:
    char filler0[0x6A8];
    GameProgressData* mGameProgressData;
    char filler1[0x1a0];
    GameDataHolder* mGameDataHolder;
    char filler2[0x198];
    s32 mCurWorldId;
    char filler3[0x170];
};

static_assert(sizeof(GameDataFile) == 0xb68);
